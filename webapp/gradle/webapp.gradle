import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "com.moowork.node"

def MAIN_CLASS = "org.apereo.cas.web.CasWebApplication"

description = "Apereo CAS Web Application"

node {
    version = "${nodeVersion}"
    nodeModulesDir = project(":webapp").projectDir
    download = true
}

if (!Boolean.getBoolean("skipNpmCache")) {
    npm_install.dependsOn(npm_cache_verify)
}  else {
    npm_install.enabled = false
}

task npmLint(type: NpmTask) {
    dependsOn npm_install
    description "Lint the JavaScript files"
    group "UI"
    args = ['run', 'lint', '--silent']
}

task compileSass(type: NpmTask) {
    group 'UI'
    dependsOn npm_install
    description "Compile Sass"
    args = ['run', 'gulp', '--silent']
}

if (!rootProject.publishingRelease && !Boolean.getBoolean("skipNpmLint")) {
    processResources.dependsOn npmLint
}

if (!Boolean.getBoolean("skipSass")) {
    processResources.dependsOn compileSass
} else {
    logger.info("Skipping Sass compilation...")
}

if (!Boolean.getBoolean("skipNodeModulesCleanUp")) {
    clean.delete << new File(project(":webapp").projectDir, "node_modules")
    clean.delete << fileTree(dir: project(":webapp").projectDir.getPath() + '/resources/static/js', include: '*-bundle.js')
} else {
    logger.info("Skipping node_modules cleanup...")
}

sourceSets {
    main {
        resources {
            srcDirs "${project.buildDir}/generated-src/main/resources"
        }
    }
}

javadoc {
    enabled false
}

springBoot {
    mainClass = MAIN_CLASS
}

bootRepackage {
    mainClass = MAIN_CLASS
    enabled = !rootProject.publishingRelease
}

bootRun {

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn pathingJar
        doFirst {
            classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
        }
    }

    addResources = true
    systemProperties = System.properties

    def list = []
    list.add("-XX:TieredStopAtLevel=1")
    list.add("-Xverify:none")
    if (rootProject.enableRemoteDebugging) {
        list.add("-Xrunjdwp:transport=dt_socket,address=5000,server=y,suspend=n")
    }

    jvmArgs = list
}

war {
    def currentTime = java.time.ZonedDateTime.now()

    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Vendor": project.group,
                "Created-By": project.group,
                "Implementation-Date": currentTime,
                "Specification-Version": rootProject.currentRevision,
                "Implementation-Version": project.version)
    }
    from "${project.buildDir}/generated-src/main/resources", { into "WEB-INF/classes" }
    enabled = !rootProject.publishingRelease
}

dependencies {
    // implementation project(":core:cas-server-core")
    // implementation project(":core:cas-server-core-monitor")
    // implementation project(":core:cas-server-core-authentication")
    // implementation project(":core:cas-server-core-services")
    // implementation project(":core:cas-server-core-logout")
    // implementation project(":core:cas-server-core-audit")
    // implementation project(":core:cas-server-core-logging")
    // implementation project(":core:cas-server-core-tickets")
    // implementation project(":core:cas-server-core-web")
    // implementation project(":core:cas-server-core-webflow")
    // implementation project(":core:cas-server-core-validation")
    // implementation project(":core:cas-server-core-util")
    // implementation project(":core:cas-server-core-cookie")
    // implementation project(":core:cas-server-core-events")
    // implementation project(":core:cas-server-core-events-configuration")
    // implementation project(":core:cas-server-core-configuration")
    // implementation project(":core:cas-server-core-configuration-metadata-repository")

    // implementation project(":support:cas-server-support-throttle")
    // implementation project(":support:cas-server-support-metrics")
    // implementation project(":support:cas-server-support-person-directory")
    // implementation project(":support:cas-server-support-configuration")
    // implementation project(":support:cas-server-support-geolocation")
    // implementation project(":support:cas-server-support-actions")
    // implementation project(":support:cas-server-support-reports")
    // implementation project(":support:cas-server-support-themes")
    // implementation project(":support:cas-server-support-validation")
    // implementation project(":support:cas-server-support-pm-webflow")
    
    // implementation project(":webapp:cas-server-webapp-config")
    // implementation project(":webapp:cas-server-webapp-init")

    implementation libraries.casserverweb
    implementation libraries.pac4j
    implementation libraries.thymeleaf
    implementation libraries.groovy
    implementation libraries.cassecurityfilter
    implementation libraries.metrics
    implementation libraries.bouncycastle
    implementation libraries.springcloudconfigclient
    implementation libraries.spring
    implementation libraries.jackson
    implementation libraries.httpclient
    implementation libraries.springcloud
    implementation libraries.springboot

    runtime libraries.webjars
}

/**
 * Share the resources directory outside the content root of the project
 * for all webapp projects in a dynamic fashion, and do it only when the taskGraph is ready.
 *
 * This allows the IDE, specially Intellij IDEA, to ignore the resources
 * directory for webapp projects, allowing it to be shared across modules.
 * While the directory isn't recognizes as a "resources" directory by the IDE,
 * it is still a valid legitimate resources directory recognized by Gradle.
 * Note that bootRun also includes the same directory for resources, allowing
 * for automatic updates to static resources, etc.
 */
gradle.taskGraph.whenReady {taskGraph ->
    def resourcesDir = "${project.projectDir}/../resources"
    logger.info("Adding resources directory ${resourcesDir} to project ${project.name}")

    sourceSets {
        main {
            resources {
                srcDir resourcesDir
            }
        }
    }
}
